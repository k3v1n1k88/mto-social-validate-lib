/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.passport.profilev2.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TUserProfile implements org.apache.thrift.TBase<TUserProfile, TUserProfile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserProfile");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("loginType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SOCIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("socialID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserProfileTupleSchemeFactory());
  }

  public long userID; // required
  public String gameID; // required
  public int loginType; // required
  public String socialID; // required
  public String info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userID"),
    GAME_ID((short)2, "gameID"),
    LOGIN_TYPE((short)3, "loginType"),
    SOCIAL_ID((short)4, "socialID"),
    INFO((short)5, "info");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // GAME_ID
          return GAME_ID;
        case 3: // LOGIN_TYPE
          return LOGIN_TYPE;
        case 4: // SOCIAL_ID
          return SOCIAL_ID;
        case 5: // INFO
          return INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __LOGINTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("loginType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOCIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("socialID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserProfile.class, metaDataMap);
  }

  public TUserProfile() {
  }

  public TUserProfile(
    long userID,
    String gameID,
    int loginType,
    String socialID,
    String info)
  {
    this();
    this.userID = userID;
    setUserIDIsSet(true);
    this.gameID = gameID;
    this.loginType = loginType;
    setLoginTypeIsSet(true);
    this.socialID = socialID;
    this.info = info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserProfile(TUserProfile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userID = other.userID;
    if (other.isSetGameID()) {
      this.gameID = other.gameID;
    }
    this.loginType = other.loginType;
    if (other.isSetSocialID()) {
      this.socialID = other.socialID;
    }
    if (other.isSetInfo()) {
      this.info = other.info;
    }
  }

  public TUserProfile deepCopy() {
    return new TUserProfile(this);
  }

  @Override
  public void clear() {
    setUserIDIsSet(false);
    this.userID = 0;
    this.gameID = null;
    setLoginTypeIsSet(false);
    this.loginType = 0;
    this.socialID = null;
    this.info = null;
  }

  public long getUserID() {
    return this.userID;
  }

  public TUserProfile setUserID(long userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getGameID() {
    return this.gameID;
  }

  public TUserProfile setGameID(String gameID) {
    this.gameID = gameID;
    return this;
  }

  public void unsetGameID() {
    this.gameID = null;
  }

  /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
  public boolean isSetGameID() {
    return this.gameID != null;
  }

  public void setGameIDIsSet(boolean value) {
    if (!value) {
      this.gameID = null;
    }
  }

  public int getLoginType() {
    return this.loginType;
  }

  public TUserProfile setLoginType(int loginType) {
    this.loginType = loginType;
    setLoginTypeIsSet(true);
    return this;
  }

  public void unsetLoginType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINTYPE_ISSET_ID);
  }

  /** Returns true if field loginType is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginType() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGINTYPE_ISSET_ID);
  }

  public void setLoginTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINTYPE_ISSET_ID, value);
  }

  public String getSocialID() {
    return this.socialID;
  }

  public TUserProfile setSocialID(String socialID) {
    this.socialID = socialID;
    return this;
  }

  public void unsetSocialID() {
    this.socialID = null;
  }

  /** Returns true if field socialID is set (has been assigned a value) and false otherwise */
  public boolean isSetSocialID() {
    return this.socialID != null;
  }

  public void setSocialIDIsSet(boolean value) {
    if (!value) {
      this.socialID = null;
    }
  }

  public String getInfo() {
    return this.info;
  }

  public TUserProfile setInfo(String info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Long)value);
      }
      break;

    case GAME_ID:
      if (value == null) {
        unsetGameID();
      } else {
        setGameID((String)value);
      }
      break;

    case LOGIN_TYPE:
      if (value == null) {
        unsetLoginType();
      } else {
        setLoginType((Integer)value);
      }
      break;

    case SOCIAL_ID:
      if (value == null) {
        unsetSocialID();
      } else {
        setSocialID((String)value);
      }
      break;

    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserID());

    case GAME_ID:
      return getGameID();

    case LOGIN_TYPE:
      return Integer.valueOf(getLoginType());

    case SOCIAL_ID:
      return getSocialID();

    case INFO:
      return getInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case GAME_ID:
      return isSetGameID();
    case LOGIN_TYPE:
      return isSetLoginType();
    case SOCIAL_ID:
      return isSetSocialID();
    case INFO:
      return isSetInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserProfile)
      return this.equals((TUserProfile)that);
    return false;
  }

  public boolean equals(TUserProfile that) {
    if (that == null)
      return false;

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_gameID = true && this.isSetGameID();
    boolean that_present_gameID = true && that.isSetGameID();
    if (this_present_gameID || that_present_gameID) {
      if (!(this_present_gameID && that_present_gameID))
        return false;
      if (!this.gameID.equals(that.gameID))
        return false;
    }

    boolean this_present_loginType = true;
    boolean that_present_loginType = true;
    if (this_present_loginType || that_present_loginType) {
      if (!(this_present_loginType && that_present_loginType))
        return false;
      if (this.loginType != that.loginType)
        return false;
    }

    boolean this_present_socialID = true && this.isSetSocialID();
    boolean that_present_socialID = true && that.isSetSocialID();
    if (this_present_socialID || that_present_socialID) {
      if (!(this_present_socialID && that_present_socialID))
        return false;
      if (!this.socialID.equals(that.socialID))
        return false;
    }

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TUserProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TUserProfile typedOther = (TUserProfile)other;

    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginType()).compareTo(typedOther.isSetLoginType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginType, typedOther.loginType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSocialID()).compareTo(typedOther.isSetSocialID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSocialID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialID, typedOther.socialID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, typedOther.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserProfile(");
    boolean first = true;

    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameID:");
    if (this.gameID == null) {
      sb.append("null");
    } else {
      sb.append(this.gameID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginType:");
    sb.append(this.loginType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("socialID:");
    if (this.socialID == null) {
      sb.append("null");
    } else {
      sb.append(this.socialID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userID' because it's a primitive and you chose the non-beans generator.
    if (gameID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameID' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'loginType' because it's a primitive and you chose the non-beans generator.
    if (socialID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'socialID' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserProfileStandardSchemeFactory implements SchemeFactory {
    public TUserProfileStandardScheme getScheme() {
      return new TUserProfileStandardScheme();
    }
  }

  private static class TUserProfileStandardScheme extends StandardScheme<TUserProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userID = iprot.readI64();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameID = iprot.readString();
              struct.setGameIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginType = iprot.readI32();
              struct.setLoginTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOCIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.socialID = iprot.readString();
              struct.setSocialIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.info = iprot.readString();
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLoginType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'loginType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userID);
      oprot.writeFieldEnd();
      if (struct.gameID != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOGIN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.loginType);
      oprot.writeFieldEnd();
      if (struct.socialID != null) {
        oprot.writeFieldBegin(SOCIAL_ID_FIELD_DESC);
        oprot.writeString(struct.socialID);
        oprot.writeFieldEnd();
      }
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        oprot.writeString(struct.info);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserProfileTupleSchemeFactory implements SchemeFactory {
    public TUserProfileTupleScheme getScheme() {
      return new TUserProfileTupleScheme();
    }
  }

  private static class TUserProfileTupleScheme extends TupleScheme<TUserProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.userID);
      oprot.writeString(struct.gameID);
      oprot.writeI32(struct.loginType);
      oprot.writeString(struct.socialID);
      BitSet optionals = new BitSet();
      if (struct.isSetInfo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetInfo()) {
        oprot.writeString(struct.info);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userID = iprot.readI64();
      struct.setUserIDIsSet(true);
      struct.gameID = iprot.readString();
      struct.setGameIDIsSet(true);
      struct.loginType = iprot.readI32();
      struct.setLoginTypeIsSet(true);
      struct.socialID = iprot.readString();
      struct.setSocialIDIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.info = iprot.readString();
        struct.setInfoIsSet(true);
      }
    }
  }

}


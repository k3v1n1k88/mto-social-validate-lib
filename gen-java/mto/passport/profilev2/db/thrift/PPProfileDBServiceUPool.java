/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.passport.profilev2.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netflix.astyanax.Execution;
import com.netflix.astyanax.connectionpool.Host;
import com.netflix.astyanax.connectionpool.OperationResult;
import com.netflix.astyanax.connectionpool.exceptions.ConnectionException;
import com.netflix.astyanax.connectionpool.impl.ConnectionPoolConfigurationImpl;
import com.netflix.astyanax.retry.RetryNTimes;
import com.netflix.astyanax.retry.RetryPolicy;
import org.apache.thrift.*;
import vn.zing.zastyanax.*;

public class PPProfileDBServiceUPool {

  public ZAstyanaxContext context;
  public static final int NUM_RETRIES = 2;
  public int maxCons = 400;
  public int maxConsPerHost = 200;
  public int initConns = 5;
  public int timeout = 1000;
  private static final Object lock = new Object();
  private static Map<String, PPProfileDBServiceUPool> instances = new HashMap<String, PPProfileDBServiceUPool>();
  private static String mapCode(String serviceName, String masterHostPort, String slaveHostPort) {
    return serviceName + masterHostPort + slaveHostPort;
  }

  public static PPProfileDBServiceUPool getInstance(String serviceName, String masterHostPort, String slaveHostPort) {
    return getInstance(serviceName, masterHostPort, slaveHostPort, 0, 0, 0, 0);
  }
  public static PPProfileDBServiceUPool getInstance(String serviceName, String masterHostPort, String slaveHostPort,int maxCons, int maxConsPerHost, int initConns, int timeout) {
    String key = mapCode(serviceName, masterHostPort, slaveHostPort);
    if (!instances.containsKey(key)) {
      synchronized(lock) {
        if (!instances.containsKey(key)) {
          instances.put(key, new PPProfileDBServiceUPool(serviceName, masterHostPort, slaveHostPort, maxCons, maxConsPerHost, initConns, timeout));
        }
      }
    }
    return instances.get(mapCode(serviceName, masterHostPort, slaveHostPort));
  }
  public PPProfileDBServiceUPool() {}
  public PPProfileDBServiceUPool(String serviceName, String masterHostPort, String slaveHostPort, int maxCons, int maxConsPerHost, int initConns, int timeout) {
    if (maxCons > 0) {
      this.maxCons = maxCons;
    }
    if (maxConsPerHost > 0) {
      this.maxConsPerHost = maxConsPerHost;
    }
    if (initConns > 0) {
      this.initConns = initConns;
    }
    if (timeout > 0) {
      this.timeout = timeout;
    }
    ConnectionPoolConfigurationImpl connectionPoolConfig = new ConnectionPoolConfigurationImpl(serviceName + "Pool")
      .setMaxConns(this.maxCons)
      .setMaxConnsPerHost(this.maxConsPerHost)
      .setInitConnsPerHost(this.initConns)
      .setConnectTimeout(this.timeout)
      .setMaxFailoverCount(NUM_RETRIES);
    RetryPolicy retryPolicy = new RetryNTimes(NUM_RETRIES);
    PPProfileDBService.Client.Factory factory = new PPProfileDBService.Client.Factory();
    Host master = new Host(masterHostPort, 88888);
    Host slave = new Host(slaveHostPort, 88888);
    context = new ZAstyanaxContext(factory, connectionPoolConfig, serviceName, master, slave, retryPolicy);
  }

  public synchronized  void changeConfig(String serviceName, String oldMasterHostPort,String oldSlaveHostPort, String masterHostPort, String slaveHostPort) {
    instances.put(mapCode(serviceName, masterHostPort, slaveHostPort),new PPProfileDBServiceUPool(serviceName, masterHostPort, slaveHostPort,maxCons, maxConsPerHost, initConns, timeout));
    instances.remove(mapCode(serviceName, oldMasterHostPort, oldSlaveHostPort));
  }

  public TReturnCode setUserProfile(final String gameID, final long userID, final TUserProfile userProfile) throws TException{
    Execution<TReturnCode> ex = new AbstractMasterSlaveSyncExecution<TReturnCode>() {
      @Override
      public OperationResult<TReturnCode> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TReturnCode internalExecute(TServiceClient client) throws Exception {
            return (TReturnCode) ((PPProfileDBService.Iface) client).setUserProfile(gameID, userID, userProfile);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TReturnCode) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TUserProfileGetProfile getUserProfile(final String gameID, final long userID) throws TException{
    Execution<TUserProfileGetProfile> ex = new AbstractMasterSlaveSyncExecution<TUserProfileGetProfile>() {
      @Override
      public OperationResult<TUserProfileGetProfile> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TUserProfileGetProfile internalExecute(TServiceClient client) throws Exception {
            return (TUserProfileGetProfile) ((PPProfileDBService.Iface) client).getUserProfile(gameID, userID);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TUserProfileGetProfile) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TReturnCode setEmailMapping(final String gameID, final long userID, final String email, final int typeLogin) throws TException{
    Execution<TReturnCode> ex = new AbstractMasterSlaveSyncExecution<TReturnCode>() {
      @Override
      public OperationResult<TReturnCode> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TReturnCode internalExecute(TServiceClient client) throws Exception {
            return (TReturnCode) ((PPProfileDBService.Iface) client).setEmailMapping(gameID, userID, email, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TReturnCode) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TEmailMappingGetEmail getEmailByUserID(final String gameID, final long userID, final int typeLogin) throws TException{
    Execution<TEmailMappingGetEmail> ex = new AbstractMasterSlaveSyncExecution<TEmailMappingGetEmail>() {
      @Override
      public OperationResult<TEmailMappingGetEmail> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TEmailMappingGetEmail internalExecute(TServiceClient client) throws Exception {
            return (TEmailMappingGetEmail) ((PPProfileDBService.Iface) client).getEmailByUserID(gameID, userID, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TEmailMappingGetEmail) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TEmailMappingGetUserID getUserIDByEmail(final String gameID, final String email, final int typeLogin) throws TException{
    Execution<TEmailMappingGetUserID> ex = new AbstractMasterSlaveSyncExecution<TEmailMappingGetUserID>() {
      @Override
      public OperationResult<TEmailMappingGetUserID> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TEmailMappingGetUserID internalExecute(TServiceClient client) throws Exception {
            return (TEmailMappingGetUserID) ((PPProfileDBService.Iface) client).getUserIDByEmail(gameID, email, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TEmailMappingGetUserID) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TReturnCode setSocialMapping(final String gameID, final long userID, final String socialID, final int typeLogin) throws TException{
    Execution<TReturnCode> ex = new AbstractMasterSlaveSyncExecution<TReturnCode>() {
      @Override
      public OperationResult<TReturnCode> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TReturnCode internalExecute(TServiceClient client) throws Exception {
            return (TReturnCode) ((PPProfileDBService.Iface) client).setSocialMapping(gameID, userID, socialID, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TReturnCode) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TSocialMappingGetSocialID getSocialIDByUserID(final String gameID, final long userID, final int typeLogin) throws TException{
    Execution<TSocialMappingGetSocialID> ex = new AbstractMasterSlaveSyncExecution<TSocialMappingGetSocialID>() {
      @Override
      public OperationResult<TSocialMappingGetSocialID> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TSocialMappingGetSocialID internalExecute(TServiceClient client) throws Exception {
            return (TSocialMappingGetSocialID) ((PPProfileDBService.Iface) client).getSocialIDByUserID(gameID, userID, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TSocialMappingGetSocialID) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

  public TSocialMappingGetUserID getUserIDBySocialID(final String gameID, final String socialID, final int typeLogin) throws TException{
    Execution<TSocialMappingGetUserID> ex = new AbstractMasterSlaveSyncExecution<TSocialMappingGetUserID>() {
      @Override
      public OperationResult<TSocialMappingGetUserID> execute() throws ConnectionException {
        return context.getConnectionPool().executeWithFailover(new AbstractOperationImpl() {
          @Override
          protected TSocialMappingGetUserID internalExecute(TServiceClient client) throws Exception {
            return (TSocialMappingGetUserID) ((PPProfileDBService.Iface) client).getUserIDBySocialID(gameID, socialID, typeLogin);
          }
        }, context.getRetryPolicy());
      }
    };
    try {
      return (TSocialMappingGetUserID) ex.execute().getResult();
    } catch (ConnectionException e) {
       throw new TApplicationException(e.getMessage());
    }
  }

}

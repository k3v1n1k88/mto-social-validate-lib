/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.passport.profilev2.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PPProfileDBService {

  public interface Iface {

    public TReturnCode setUserProfile(String gameID, long userID, TUserProfile userProfile) throws org.apache.thrift.TException;

    public TUserProfileGetProfile getUserProfile(String gameID, long userID) throws org.apache.thrift.TException;

    public TReturnCode setEmailMapping(String gameID, long userID, String email, int typeLogin) throws org.apache.thrift.TException;

    public TEmailMappingGetEmail getEmailByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException;

    public TEmailMappingGetUserID getUserIDByEmail(String gameID, String email, int typeLogin) throws org.apache.thrift.TException;

    public TReturnCode setSocialMapping(String gameID, long userID, String socialID, int typeLogin) throws org.apache.thrift.TException;

    public TSocialMappingGetSocialID getSocialIDByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException;

    public TSocialMappingGetUserID getUserIDBySocialID(String gameID, String socialID, int typeLogin) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setUserProfile(String gameID, long userID, TUserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setUserProfile_call> resultHandler) throws org.apache.thrift.TException;

    public void getUserProfile(String gameID, long userID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUserProfile_call> resultHandler) throws org.apache.thrift.TException;

    public void setEmailMapping(String gameID, long userID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setEmailMapping_call> resultHandler) throws org.apache.thrift.TException;

    public void getEmailByUserID(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEmailByUserID_call> resultHandler) throws org.apache.thrift.TException;

    public void getUserIDByEmail(String gameID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUserIDByEmail_call> resultHandler) throws org.apache.thrift.TException;

    public void setSocialMapping(String gameID, long userID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSocialMapping_call> resultHandler) throws org.apache.thrift.TException;

    public void getSocialIDByUserID(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSocialIDByUserID_call> resultHandler) throws org.apache.thrift.TException;

    public void getUserIDBySocialID(String gameID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUserIDBySocialID_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TReturnCode setUserProfile(String gameID, long userID, TUserProfile userProfile) throws org.apache.thrift.TException
    {
      send_setUserProfile(gameID, userID, userProfile);
      return recv_setUserProfile();
    }

    public void send_setUserProfile(String gameID, long userID, TUserProfile userProfile) throws org.apache.thrift.TException
    {
      setUserProfile_args args = new setUserProfile_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setUserProfile(userProfile);
      sendBase("setUserProfile", args);
    }

    public TReturnCode recv_setUserProfile() throws org.apache.thrift.TException
    {
      setUserProfile_result result = new setUserProfile_result();
      receiveBase(result, "setUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserProfile failed: unknown result");
    }

    public TUserProfileGetProfile getUserProfile(String gameID, long userID) throws org.apache.thrift.TException
    {
      send_getUserProfile(gameID, userID);
      return recv_getUserProfile();
    }

    public void send_getUserProfile(String gameID, long userID) throws org.apache.thrift.TException
    {
      getUserProfile_args args = new getUserProfile_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      sendBase("getUserProfile", args);
    }

    public TUserProfileGetProfile recv_getUserProfile() throws org.apache.thrift.TException
    {
      getUserProfile_result result = new getUserProfile_result();
      receiveBase(result, "getUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserProfile failed: unknown result");
    }

    public TReturnCode setEmailMapping(String gameID, long userID, String email, int typeLogin) throws org.apache.thrift.TException
    {
      send_setEmailMapping(gameID, userID, email, typeLogin);
      return recv_setEmailMapping();
    }

    public void send_setEmailMapping(String gameID, long userID, String email, int typeLogin) throws org.apache.thrift.TException
    {
      setEmailMapping_args args = new setEmailMapping_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setEmail(email);
      args.setTypeLogin(typeLogin);
      sendBase("setEmailMapping", args);
    }

    public TReturnCode recv_setEmailMapping() throws org.apache.thrift.TException
    {
      setEmailMapping_result result = new setEmailMapping_result();
      receiveBase(result, "setEmailMapping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setEmailMapping failed: unknown result");
    }

    public TEmailMappingGetEmail getEmailByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException
    {
      send_getEmailByUserID(gameID, userID, typeLogin);
      return recv_getEmailByUserID();
    }

    public void send_getEmailByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException
    {
      getEmailByUserID_args args = new getEmailByUserID_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setTypeLogin(typeLogin);
      sendBase("getEmailByUserID", args);
    }

    public TEmailMappingGetEmail recv_getEmailByUserID() throws org.apache.thrift.TException
    {
      getEmailByUserID_result result = new getEmailByUserID_result();
      receiveBase(result, "getEmailByUserID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmailByUserID failed: unknown result");
    }

    public TEmailMappingGetUserID getUserIDByEmail(String gameID, String email, int typeLogin) throws org.apache.thrift.TException
    {
      send_getUserIDByEmail(gameID, email, typeLogin);
      return recv_getUserIDByEmail();
    }

    public void send_getUserIDByEmail(String gameID, String email, int typeLogin) throws org.apache.thrift.TException
    {
      getUserIDByEmail_args args = new getUserIDByEmail_args();
      args.setGameID(gameID);
      args.setEmail(email);
      args.setTypeLogin(typeLogin);
      sendBase("getUserIDByEmail", args);
    }

    public TEmailMappingGetUserID recv_getUserIDByEmail() throws org.apache.thrift.TException
    {
      getUserIDByEmail_result result = new getUserIDByEmail_result();
      receiveBase(result, "getUserIDByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserIDByEmail failed: unknown result");
    }

    public TReturnCode setSocialMapping(String gameID, long userID, String socialID, int typeLogin) throws org.apache.thrift.TException
    {
      send_setSocialMapping(gameID, userID, socialID, typeLogin);
      return recv_setSocialMapping();
    }

    public void send_setSocialMapping(String gameID, long userID, String socialID, int typeLogin) throws org.apache.thrift.TException
    {
      setSocialMapping_args args = new setSocialMapping_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setSocialID(socialID);
      args.setTypeLogin(typeLogin);
      sendBase("setSocialMapping", args);
    }

    public TReturnCode recv_setSocialMapping() throws org.apache.thrift.TException
    {
      setSocialMapping_result result = new setSocialMapping_result();
      receiveBase(result, "setSocialMapping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setSocialMapping failed: unknown result");
    }

    public TSocialMappingGetSocialID getSocialIDByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException
    {
      send_getSocialIDByUserID(gameID, userID, typeLogin);
      return recv_getSocialIDByUserID();
    }

    public void send_getSocialIDByUserID(String gameID, long userID, int typeLogin) throws org.apache.thrift.TException
    {
      getSocialIDByUserID_args args = new getSocialIDByUserID_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setTypeLogin(typeLogin);
      sendBase("getSocialIDByUserID", args);
    }

    public TSocialMappingGetSocialID recv_getSocialIDByUserID() throws org.apache.thrift.TException
    {
      getSocialIDByUserID_result result = new getSocialIDByUserID_result();
      receiveBase(result, "getSocialIDByUserID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSocialIDByUserID failed: unknown result");
    }

    public TSocialMappingGetUserID getUserIDBySocialID(String gameID, String socialID, int typeLogin) throws org.apache.thrift.TException
    {
      send_getUserIDBySocialID(gameID, socialID, typeLogin);
      return recv_getUserIDBySocialID();
    }

    public void send_getUserIDBySocialID(String gameID, String socialID, int typeLogin) throws org.apache.thrift.TException
    {
      getUserIDBySocialID_args args = new getUserIDBySocialID_args();
      args.setGameID(gameID);
      args.setSocialID(socialID);
      args.setTypeLogin(typeLogin);
      sendBase("getUserIDBySocialID", args);
    }

    public TSocialMappingGetUserID recv_getUserIDBySocialID() throws org.apache.thrift.TException
    {
      getUserIDBySocialID_result result = new getUserIDBySocialID_result();
      receiveBase(result, "getUserIDBySocialID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserIDBySocialID failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setUserProfile(String gameID, long userID, TUserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<setUserProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserProfile_call method_call = new setUserProfile_call(gameID, userID, userProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      private TUserProfile userProfile;
      public setUserProfile_call(String gameID, long userID, TUserProfile userProfile, org.apache.thrift.async.AsyncMethodCallback<setUserProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.userProfile = userProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserProfile_args args = new setUserProfile_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setUserProfile(userProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserProfile();
      }
    }

    public void getUserProfile(String gameID, long userID, org.apache.thrift.async.AsyncMethodCallback<getUserProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserProfile_call method_call = new getUserProfile_call(gameID, userID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      public getUserProfile_call(String gameID, long userID, org.apache.thrift.async.AsyncMethodCallback<getUserProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserProfile_args args = new getUserProfile_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TUserProfileGetProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserProfile();
      }
    }

    public void setEmailMapping(String gameID, long userID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<setEmailMapping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setEmailMapping_call method_call = new setEmailMapping_call(gameID, userID, email, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setEmailMapping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      private String email;
      private int typeLogin;
      public setEmailMapping_call(String gameID, long userID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<setEmailMapping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.email = email;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setEmailMapping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setEmailMapping_args args = new setEmailMapping_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setEmail(email);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setEmailMapping();
      }
    }

    public void getEmailByUserID(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getEmailByUserID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmailByUserID_call method_call = new getEmailByUserID_call(gameID, userID, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmailByUserID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      private int typeLogin;
      public getEmailByUserID_call(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getEmailByUserID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmailByUserID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmailByUserID_args args = new getEmailByUserID_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmailMappingGetEmail getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmailByUserID();
      }
    }

    public void getUserIDByEmail(String gameID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getUserIDByEmail_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserIDByEmail_call method_call = new getUserIDByEmail_call(gameID, email, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserIDByEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String email;
      private int typeLogin;
      public getUserIDByEmail_call(String gameID, String email, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getUserIDByEmail_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.email = email;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserIDByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserIDByEmail_args args = new getUserIDByEmail_args();
        args.setGameID(gameID);
        args.setEmail(email);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEmailMappingGetUserID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserIDByEmail();
      }
    }

    public void setSocialMapping(String gameID, long userID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<setSocialMapping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSocialMapping_call method_call = new setSocialMapping_call(gameID, userID, socialID, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSocialMapping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      private String socialID;
      private int typeLogin;
      public setSocialMapping_call(String gameID, long userID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<setSocialMapping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.socialID = socialID;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSocialMapping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSocialMapping_args args = new setSocialMapping_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setSocialID(socialID);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setSocialMapping();
      }
    }

    public void getSocialIDByUserID(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getSocialIDByUserID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSocialIDByUserID_call method_call = new getSocialIDByUserID_call(gameID, userID, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSocialIDByUserID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private long userID;
      private int typeLogin;
      public getSocialIDByUserID_call(String gameID, long userID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getSocialIDByUserID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSocialIDByUserID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSocialIDByUserID_args args = new getSocialIDByUserID_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSocialMappingGetSocialID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSocialIDByUserID();
      }
    }

    public void getUserIDBySocialID(String gameID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getUserIDBySocialID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserIDBySocialID_call method_call = new getUserIDBySocialID_call(gameID, socialID, typeLogin, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserIDBySocialID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String socialID;
      private int typeLogin;
      public getUserIDBySocialID_call(String gameID, String socialID, int typeLogin, org.apache.thrift.async.AsyncMethodCallback<getUserIDBySocialID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.socialID = socialID;
        this.typeLogin = typeLogin;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserIDBySocialID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserIDBySocialID_args args = new getUserIDBySocialID_args();
        args.setGameID(gameID);
        args.setSocialID(socialID);
        args.setTypeLogin(typeLogin);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSocialMappingGetUserID getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserIDBySocialID();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setUserProfile", new setUserProfile());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("setEmailMapping", new setEmailMapping());
      processMap.put("getEmailByUserID", new getEmailByUserID());
      processMap.put("getUserIDByEmail", new getUserIDByEmail());
      processMap.put("setSocialMapping", new setSocialMapping());
      processMap.put("getSocialIDByUserID", new getSocialIDByUserID());
      processMap.put("getUserIDBySocialID", new getUserIDBySocialID());
      return processMap;
    }

    public static class setUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserProfile_args> {
      public setUserProfile() {
        super("setUserProfile");
      }

      public setUserProfile_args getEmptyArgsInstance() {
        return new setUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUserProfile_result getResult(I iface, setUserProfile_args args) throws org.apache.thrift.TException {
        setUserProfile_result result = new setUserProfile_result();
        result.success = iface.setUserProfile(args.gameID, args.userID, args.userProfile);
        return result;
      }
    }

    public static class getUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserProfile_args> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserProfile_result getResult(I iface, getUserProfile_args args) throws org.apache.thrift.TException {
        getUserProfile_result result = new getUserProfile_result();
        result.success = iface.getUserProfile(args.gameID, args.userID);
        return result;
      }
    }

    public static class setEmailMapping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setEmailMapping_args> {
      public setEmailMapping() {
        super("setEmailMapping");
      }

      public setEmailMapping_args getEmptyArgsInstance() {
        return new setEmailMapping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setEmailMapping_result getResult(I iface, setEmailMapping_args args) throws org.apache.thrift.TException {
        setEmailMapping_result result = new setEmailMapping_result();
        result.success = iface.setEmailMapping(args.gameID, args.userID, args.email, args.typeLogin);
        return result;
      }
    }

    public static class getEmailByUserID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmailByUserID_args> {
      public getEmailByUserID() {
        super("getEmailByUserID");
      }

      public getEmailByUserID_args getEmptyArgsInstance() {
        return new getEmailByUserID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmailByUserID_result getResult(I iface, getEmailByUserID_args args) throws org.apache.thrift.TException {
        getEmailByUserID_result result = new getEmailByUserID_result();
        result.success = iface.getEmailByUserID(args.gameID, args.userID, args.typeLogin);
        return result;
      }
    }

    public static class getUserIDByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserIDByEmail_args> {
      public getUserIDByEmail() {
        super("getUserIDByEmail");
      }

      public getUserIDByEmail_args getEmptyArgsInstance() {
        return new getUserIDByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserIDByEmail_result getResult(I iface, getUserIDByEmail_args args) throws org.apache.thrift.TException {
        getUserIDByEmail_result result = new getUserIDByEmail_result();
        result.success = iface.getUserIDByEmail(args.gameID, args.email, args.typeLogin);
        return result;
      }
    }

    public static class setSocialMapping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSocialMapping_args> {
      public setSocialMapping() {
        super("setSocialMapping");
      }

      public setSocialMapping_args getEmptyArgsInstance() {
        return new setSocialMapping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSocialMapping_result getResult(I iface, setSocialMapping_args args) throws org.apache.thrift.TException {
        setSocialMapping_result result = new setSocialMapping_result();
        result.success = iface.setSocialMapping(args.gameID, args.userID, args.socialID, args.typeLogin);
        return result;
      }
    }

    public static class getSocialIDByUserID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSocialIDByUserID_args> {
      public getSocialIDByUserID() {
        super("getSocialIDByUserID");
      }

      public getSocialIDByUserID_args getEmptyArgsInstance() {
        return new getSocialIDByUserID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSocialIDByUserID_result getResult(I iface, getSocialIDByUserID_args args) throws org.apache.thrift.TException {
        getSocialIDByUserID_result result = new getSocialIDByUserID_result();
        result.success = iface.getSocialIDByUserID(args.gameID, args.userID, args.typeLogin);
        return result;
      }
    }

    public static class getUserIDBySocialID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserIDBySocialID_args> {
      public getUserIDBySocialID() {
        super("getUserIDBySocialID");
      }

      public getUserIDBySocialID_args getEmptyArgsInstance() {
        return new getUserIDBySocialID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserIDBySocialID_result getResult(I iface, getUserIDBySocialID_args args) throws org.apache.thrift.TException {
        getUserIDBySocialID_result result = new getUserIDBySocialID_result();
        result.success = iface.getUserIDBySocialID(args.gameID, args.socialID, args.typeLogin);
        return result;
      }
    }

  }

  public static class setUserProfile_args implements org.apache.thrift.TBase<setUserProfile_args, setUserProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserProfile_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserProfile_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required
    public TUserProfile userProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      USER_PROFILE((short)3, "userProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // USER_PROFILE
            return USER_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserProfile_args.class, metaDataMap);
    }

    public setUserProfile_args() {
    }

    public setUserProfile_args(
      String gameID,
      long userID,
      TUserProfile userProfile)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.userProfile = userProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserProfile_args(setUserProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
      if (other.isSetUserProfile()) {
        this.userProfile = new TUserProfile(other.userProfile);
      }
    }

    public setUserProfile_args deepCopy() {
      return new setUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      this.userProfile = null;
    }

    public String getGameID() {
      return this.gameID;
    }

    public setUserProfile_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public setUserProfile_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public TUserProfile getUserProfile() {
      return this.userProfile;
    }

    public setUserProfile_args setUserProfile(TUserProfile userProfile) {
      this.userProfile = userProfile;
      return this;
    }

    public void unsetUserProfile() {
      this.userProfile = null;
    }

    /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfile() {
      return this.userProfile != null;
    }

    public void setUserProfileIsSet(boolean value) {
      if (!value) {
        this.userProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case USER_PROFILE:
        if (value == null) {
          unsetUserProfile();
        } else {
          setUserProfile((TUserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      case USER_PROFILE:
        return getUserProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case USER_PROFILE:
        return isSetUserProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserProfile_args)
        return this.equals((setUserProfile_args)that);
      return false;
    }

    public boolean equals(setUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_userProfile = true && this.isSetUserProfile();
      boolean that_present_userProfile = true && that.isSetUserProfile();
      if (this_present_userProfile || that_present_userProfile) {
        if (!(this_present_userProfile && that_present_userProfile))
          return false;
        if (!this.userProfile.equals(that.userProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setUserProfile_args typedOther = (setUserProfile_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(typedOther.isSetUserProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, typedOther.userProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserProfile_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userProfile:");
      if (this.userProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.userProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (userProfile != null) {
        userProfile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public setUserProfile_argsStandardScheme getScheme() {
        return new setUserProfile_argsStandardScheme();
      }
    }

    private static class setUserProfile_argsStandardScheme extends StandardScheme<setUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userProfile = new TUserProfile();
                struct.userProfile.read(iprot);
                struct.setUserProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        if (struct.userProfile != null) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.userProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public setUserProfile_argsTupleScheme getScheme() {
        return new setUserProfile_argsTupleScheme();
      }
    }

    private static class setUserProfile_argsTupleScheme extends TupleScheme<setUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetUserProfile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
        if (struct.isSetUserProfile()) {
          struct.userProfile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userProfile = new TUserProfile();
          struct.userProfile.read(iprot);
          struct.setUserProfileIsSet(true);
        }
      }
    }

  }

  public static class setUserProfile_result implements org.apache.thrift.TBase<setUserProfile_result, setUserProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserProfile_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserProfile_result.class, metaDataMap);
    }

    public setUserProfile_result() {
    }

    public setUserProfile_result(
      TReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserProfile_result(setUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setUserProfile_result deepCopy() {
      return new setUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TReturnCode
     */
    public setUserProfile_result setSuccess(TReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserProfile_result)
        return this.equals((setUserProfile_result)that);
      return false;
    }

    public boolean equals(setUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setUserProfile_result typedOther = (setUserProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public setUserProfile_resultStandardScheme getScheme() {
        return new setUserProfile_resultStandardScheme();
      }
    }

    private static class setUserProfile_resultStandardScheme extends StandardScheme<setUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public setUserProfile_resultTupleScheme getScheme() {
        return new setUserProfile_resultTupleScheme();
      }
    }

    private static class setUserProfile_resultTupleScheme extends TupleScheme<setUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_args implements org.apache.thrift.TBase<getUserProfile_args, getUserProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_args.class, metaDataMap);
    }

    public getUserProfile_args() {
    }

    public getUserProfile_args(
      String gameID,
      long userID)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_args(getUserProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
    }

    public getUserProfile_args deepCopy() {
      return new getUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getUserProfile_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public getUserProfile_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_args)
        return this.equals((getUserProfile_args)that);
      return false;
    }

    public boolean equals(getUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserProfile_args typedOther = (getUserProfile_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_argsStandardScheme getScheme() {
        return new getUserProfile_argsStandardScheme();
      }
    }

    private static class getUserProfile_argsStandardScheme extends StandardScheme<getUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_argsTupleScheme getScheme() {
        return new getUserProfile_argsTupleScheme();
      }
    }

    private static class getUserProfile_argsTupleScheme extends TupleScheme<getUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_result implements org.apache.thrift.TBase<getUserProfile_result, getUserProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_resultTupleSchemeFactory());
    }

    public TUserProfileGetProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserProfileGetProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_result.class, metaDataMap);
    }

    public getUserProfile_result() {
    }

    public getUserProfile_result(
      TUserProfileGetProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_result(getUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new TUserProfileGetProfile(other.success);
      }
    }

    public getUserProfile_result deepCopy() {
      return new getUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TUserProfileGetProfile getSuccess() {
      return this.success;
    }

    public getUserProfile_result setSuccess(TUserProfileGetProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TUserProfileGetProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_result)
        return this.equals((getUserProfile_result)that);
      return false;
    }

    public boolean equals(getUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserProfile_result typedOther = (getUserProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_resultStandardScheme getScheme() {
        return new getUserProfile_resultStandardScheme();
      }
    }

    private static class getUserProfile_resultStandardScheme extends StandardScheme<getUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TUserProfileGetProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_resultTupleScheme getScheme() {
        return new getUserProfile_resultTupleScheme();
      }
    }

    private static class getUserProfile_resultTupleScheme extends TupleScheme<getUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TUserProfileGetProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setEmailMapping_args implements org.apache.thrift.TBase<setEmailMapping_args, setEmailMapping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEmailMapping_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEmailMapping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEmailMapping_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required
    public String email; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      EMAIL((short)3, "email"),
      TYPE_LOGIN((short)4, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // EMAIL
            return EMAIL;
          case 4: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TYPELOGIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEmailMapping_args.class, metaDataMap);
    }

    public setEmailMapping_args() {
    }

    public setEmailMapping_args(
      String gameID,
      long userID,
      String email,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.email = email;
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEmailMapping_args(setEmailMapping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      this.typeLogin = other.typeLogin;
    }

    public setEmailMapping_args deepCopy() {
      return new setEmailMapping_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      this.email = null;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public setEmailMapping_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public setEmailMapping_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getEmail() {
      return this.email;
    }

    public setEmailMapping_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public setEmailMapping_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      case EMAIL:
        return getEmail();

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case EMAIL:
        return isSetEmail();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEmailMapping_args)
        return this.equals((setEmailMapping_args)that);
      return false;
    }

    public boolean equals(setEmailMapping_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEmailMapping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEmailMapping_args typedOther = (setEmailMapping_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEmailMapping_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEmailMapping_argsStandardSchemeFactory implements SchemeFactory {
      public setEmailMapping_argsStandardScheme getScheme() {
        return new setEmailMapping_argsStandardScheme();
      }
    }

    private static class setEmailMapping_argsStandardScheme extends StandardScheme<setEmailMapping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEmailMapping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEmailMapping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEmailMapping_argsTupleSchemeFactory implements SchemeFactory {
      public setEmailMapping_argsTupleScheme getScheme() {
        return new setEmailMapping_argsTupleScheme();
      }
    }

    private static class setEmailMapping_argsTupleScheme extends TupleScheme<setEmailMapping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEmailMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetEmail()) {
          optionals.set(2);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEmailMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class setEmailMapping_result implements org.apache.thrift.TBase<setEmailMapping_result, setEmailMapping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEmailMapping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEmailMapping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEmailMapping_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEmailMapping_result.class, metaDataMap);
    }

    public setEmailMapping_result() {
    }

    public setEmailMapping_result(
      TReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEmailMapping_result(setEmailMapping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setEmailMapping_result deepCopy() {
      return new setEmailMapping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TReturnCode
     */
    public setEmailMapping_result setSuccess(TReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEmailMapping_result)
        return this.equals((setEmailMapping_result)that);
      return false;
    }

    public boolean equals(setEmailMapping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setEmailMapping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setEmailMapping_result typedOther = (setEmailMapping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEmailMapping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEmailMapping_resultStandardSchemeFactory implements SchemeFactory {
      public setEmailMapping_resultStandardScheme getScheme() {
        return new setEmailMapping_resultStandardScheme();
      }
    }

    private static class setEmailMapping_resultStandardScheme extends StandardScheme<setEmailMapping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEmailMapping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEmailMapping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEmailMapping_resultTupleSchemeFactory implements SchemeFactory {
      public setEmailMapping_resultTupleScheme getScheme() {
        return new setEmailMapping_resultTupleScheme();
      }
    }

    private static class setEmailMapping_resultTupleScheme extends TupleScheme<setEmailMapping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEmailMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEmailMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEmailByUserID_args implements org.apache.thrift.TBase<getEmailByUserID_args, getEmailByUserID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailByUserID_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmailByUserID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmailByUserID_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      TYPE_LOGIN((short)3, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TYPELOGIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailByUserID_args.class, metaDataMap);
    }

    public getEmailByUserID_args() {
    }

    public getEmailByUserID_args(
      String gameID,
      long userID,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmailByUserID_args(getEmailByUserID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
      this.typeLogin = other.typeLogin;
    }

    public getEmailByUserID_args deepCopy() {
      return new getEmailByUserID_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getEmailByUserID_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public getEmailByUserID_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public getEmailByUserID_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmailByUserID_args)
        return this.equals((getEmailByUserID_args)that);
      return false;
    }

    public boolean equals(getEmailByUserID_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEmailByUserID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEmailByUserID_args typedOther = (getEmailByUserID_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmailByUserID_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmailByUserID_argsStandardSchemeFactory implements SchemeFactory {
      public getEmailByUserID_argsStandardScheme getScheme() {
        return new getEmailByUserID_argsStandardScheme();
      }
    }

    private static class getEmailByUserID_argsStandardScheme extends StandardScheme<getEmailByUserID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailByUserID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailByUserID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmailByUserID_argsTupleSchemeFactory implements SchemeFactory {
      public getEmailByUserID_argsTupleScheme getScheme() {
        return new getEmailByUserID_argsTupleScheme();
      }
    }

    private static class getEmailByUserID_argsTupleScheme extends TupleScheme<getEmailByUserID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmailByUserID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmailByUserID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class getEmailByUserID_result implements org.apache.thrift.TBase<getEmailByUserID_result, getEmailByUserID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmailByUserID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmailByUserID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmailByUserID_resultTupleSchemeFactory());
    }

    public TEmailMappingGetEmail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmailMappingGetEmail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmailByUserID_result.class, metaDataMap);
    }

    public getEmailByUserID_result() {
    }

    public getEmailByUserID_result(
      TEmailMappingGetEmail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmailByUserID_result(getEmailByUserID_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmailMappingGetEmail(other.success);
      }
    }

    public getEmailByUserID_result deepCopy() {
      return new getEmailByUserID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TEmailMappingGetEmail getSuccess() {
      return this.success;
    }

    public getEmailByUserID_result setSuccess(TEmailMappingGetEmail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmailMappingGetEmail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmailByUserID_result)
        return this.equals((getEmailByUserID_result)that);
      return false;
    }

    public boolean equals(getEmailByUserID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEmailByUserID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEmailByUserID_result typedOther = (getEmailByUserID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmailByUserID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmailByUserID_resultStandardSchemeFactory implements SchemeFactory {
      public getEmailByUserID_resultStandardScheme getScheme() {
        return new getEmailByUserID_resultStandardScheme();
      }
    }

    private static class getEmailByUserID_resultStandardScheme extends StandardScheme<getEmailByUserID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmailByUserID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmailMappingGetEmail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmailByUserID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmailByUserID_resultTupleSchemeFactory implements SchemeFactory {
      public getEmailByUserID_resultTupleScheme getScheme() {
        return new getEmailByUserID_resultTupleScheme();
      }
    }

    private static class getEmailByUserID_resultTupleScheme extends TupleScheme<getEmailByUserID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmailByUserID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmailByUserID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TEmailMappingGetEmail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserIDByEmail_args implements org.apache.thrift.TBase<getUserIDByEmail_args, getUserIDByEmail_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIDByEmail_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIDByEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIDByEmail_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String email; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      EMAIL((short)2, "email"),
      TYPE_LOGIN((short)3, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // EMAIL
            return EMAIL;
          case 3: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPELOGIN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIDByEmail_args.class, metaDataMap);
    }

    public getUserIDByEmail_args() {
    }

    public getUserIDByEmail_args(
      String gameID,
      String email,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.email = email;
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIDByEmail_args(getUserIDByEmail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      this.typeLogin = other.typeLogin;
    }

    public getUserIDByEmail_args deepCopy() {
      return new getUserIDByEmail_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.email = null;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getUserIDByEmail_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public getUserIDByEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public getUserIDByEmail_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case EMAIL:
        return getEmail();

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case EMAIL:
        return isSetEmail();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIDByEmail_args)
        return this.equals((getUserIDByEmail_args)that);
      return false;
    }

    public boolean equals(getUserIDByEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserIDByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserIDByEmail_args typedOther = (getUserIDByEmail_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIDByEmail_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIDByEmail_argsStandardSchemeFactory implements SchemeFactory {
      public getUserIDByEmail_argsStandardScheme getScheme() {
        return new getUserIDByEmail_argsStandardScheme();
      }
    }

    private static class getUserIDByEmail_argsStandardScheme extends StandardScheme<getUserIDByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIDByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIDByEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIDByEmail_argsTupleSchemeFactory implements SchemeFactory {
      public getUserIDByEmail_argsTupleScheme getScheme() {
        return new getUserIDByEmail_argsTupleScheme();
      }
    }

    private static class getUserIDByEmail_argsTupleScheme extends TupleScheme<getUserIDByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIDByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetEmail()) {
          optionals.set(1);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIDByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class getUserIDByEmail_result implements org.apache.thrift.TBase<getUserIDByEmail_result, getUserIDByEmail_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIDByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIDByEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIDByEmail_resultTupleSchemeFactory());
    }

    public TEmailMappingGetUserID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEmailMappingGetUserID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIDByEmail_result.class, metaDataMap);
    }

    public getUserIDByEmail_result() {
    }

    public getUserIDByEmail_result(
      TEmailMappingGetUserID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIDByEmail_result(getUserIDByEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEmailMappingGetUserID(other.success);
      }
    }

    public getUserIDByEmail_result deepCopy() {
      return new getUserIDByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TEmailMappingGetUserID getSuccess() {
      return this.success;
    }

    public getUserIDByEmail_result setSuccess(TEmailMappingGetUserID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEmailMappingGetUserID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIDByEmail_result)
        return this.equals((getUserIDByEmail_result)that);
      return false;
    }

    public boolean equals(getUserIDByEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserIDByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserIDByEmail_result typedOther = (getUserIDByEmail_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIDByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIDByEmail_resultStandardSchemeFactory implements SchemeFactory {
      public getUserIDByEmail_resultStandardScheme getScheme() {
        return new getUserIDByEmail_resultStandardScheme();
      }
    }

    private static class getUserIDByEmail_resultStandardScheme extends StandardScheme<getUserIDByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIDByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEmailMappingGetUserID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIDByEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIDByEmail_resultTupleSchemeFactory implements SchemeFactory {
      public getUserIDByEmail_resultTupleScheme getScheme() {
        return new getUserIDByEmail_resultTupleScheme();
      }
    }

    private static class getUserIDByEmail_resultTupleScheme extends TupleScheme<getUserIDByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIDByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIDByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TEmailMappingGetUserID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setSocialMapping_args implements org.apache.thrift.TBase<setSocialMapping_args, setSocialMapping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSocialMapping_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SOCIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("socialID", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSocialMapping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSocialMapping_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required
    public String socialID; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      SOCIAL_ID((short)3, "socialID"),
      TYPE_LOGIN((short)4, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // SOCIAL_ID
            return SOCIAL_ID;
          case 4: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TYPELOGIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SOCIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("socialID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSocialMapping_args.class, metaDataMap);
    }

    public setSocialMapping_args() {
    }

    public setSocialMapping_args(
      String gameID,
      long userID,
      String socialID,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.socialID = socialID;
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSocialMapping_args(setSocialMapping_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
      if (other.isSetSocialID()) {
        this.socialID = other.socialID;
      }
      this.typeLogin = other.typeLogin;
    }

    public setSocialMapping_args deepCopy() {
      return new setSocialMapping_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      this.socialID = null;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public setSocialMapping_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public setSocialMapping_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public String getSocialID() {
      return this.socialID;
    }

    public setSocialMapping_args setSocialID(String socialID) {
      this.socialID = socialID;
      return this;
    }

    public void unsetSocialID() {
      this.socialID = null;
    }

    /** Returns true if field socialID is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialID() {
      return this.socialID != null;
    }

    public void setSocialIDIsSet(boolean value) {
      if (!value) {
        this.socialID = null;
      }
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public setSocialMapping_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case SOCIAL_ID:
        if (value == null) {
          unsetSocialID();
        } else {
          setSocialID((String)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      case SOCIAL_ID:
        return getSocialID();

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case SOCIAL_ID:
        return isSetSocialID();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSocialMapping_args)
        return this.equals((setSocialMapping_args)that);
      return false;
    }

    public boolean equals(setSocialMapping_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_socialID = true && this.isSetSocialID();
      boolean that_present_socialID = true && that.isSetSocialID();
      if (this_present_socialID || that_present_socialID) {
        if (!(this_present_socialID && that_present_socialID))
          return false;
        if (!this.socialID.equals(that.socialID))
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSocialMapping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSocialMapping_args typedOther = (setSocialMapping_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialID()).compareTo(typedOther.isSetSocialID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialID, typedOther.socialID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSocialMapping_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialID:");
      if (this.socialID == null) {
        sb.append("null");
      } else {
        sb.append(this.socialID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSocialMapping_argsStandardSchemeFactory implements SchemeFactory {
      public setSocialMapping_argsStandardScheme getScheme() {
        return new setSocialMapping_argsStandardScheme();
      }
    }

    private static class setSocialMapping_argsStandardScheme extends StandardScheme<setSocialMapping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSocialMapping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOCIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socialID = iprot.readString();
                struct.setSocialIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSocialMapping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        if (struct.socialID != null) {
          oprot.writeFieldBegin(SOCIAL_ID_FIELD_DESC);
          oprot.writeString(struct.socialID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSocialMapping_argsTupleSchemeFactory implements SchemeFactory {
      public setSocialMapping_argsTupleScheme getScheme() {
        return new setSocialMapping_argsTupleScheme();
      }
    }

    private static class setSocialMapping_argsTupleScheme extends TupleScheme<setSocialMapping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSocialMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetSocialID()) {
          optionals.set(2);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
        if (struct.isSetSocialID()) {
          oprot.writeString(struct.socialID);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSocialMapping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.socialID = iprot.readString();
          struct.setSocialIDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class setSocialMapping_result implements org.apache.thrift.TBase<setSocialMapping_result, setSocialMapping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSocialMapping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSocialMapping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSocialMapping_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSocialMapping_result.class, metaDataMap);
    }

    public setSocialMapping_result() {
    }

    public setSocialMapping_result(
      TReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSocialMapping_result(setSocialMapping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setSocialMapping_result deepCopy() {
      return new setSocialMapping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TReturnCode
     */
    public setSocialMapping_result setSuccess(TReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSocialMapping_result)
        return this.equals((setSocialMapping_result)that);
      return false;
    }

    public boolean equals(setSocialMapping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSocialMapping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSocialMapping_result typedOther = (setSocialMapping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSocialMapping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSocialMapping_resultStandardSchemeFactory implements SchemeFactory {
      public setSocialMapping_resultStandardScheme getScheme() {
        return new setSocialMapping_resultStandardScheme();
      }
    }

    private static class setSocialMapping_resultStandardScheme extends StandardScheme<setSocialMapping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSocialMapping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSocialMapping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSocialMapping_resultTupleSchemeFactory implements SchemeFactory {
      public setSocialMapping_resultTupleScheme getScheme() {
        return new setSocialMapping_resultTupleScheme();
      }
    }

    private static class setSocialMapping_resultTupleScheme extends TupleScheme<setSocialMapping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSocialMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSocialMapping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSocialIDByUserID_args implements org.apache.thrift.TBase<getSocialIDByUserID_args, getSocialIDByUserID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSocialIDByUserID_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSocialIDByUserID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSocialIDByUserID_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public long userID; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      TYPE_LOGIN((short)3, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TYPELOGIN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSocialIDByUserID_args.class, metaDataMap);
    }

    public getSocialIDByUserID_args() {
    }

    public getSocialIDByUserID_args(
      String gameID,
      long userID,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      setUserIDIsSet(true);
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSocialIDByUserID_args(getSocialIDByUserID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      this.userID = other.userID;
      this.typeLogin = other.typeLogin;
    }

    public getSocialIDByUserID_args deepCopy() {
      return new getSocialIDByUserID_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      setUserIDIsSet(false);
      this.userID = 0;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getSocialIDByUserID_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public long getUserID() {
      return this.userID;
    }

    public getSocialIDByUserID_args setUserID(long userID) {
      this.userID = userID;
      setUserIDIsSet(true);
      return this;
    }

    public void unsetUserID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public getSocialIDByUserID_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((Long)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return Long.valueOf(getUserID());

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSocialIDByUserID_args)
        return this.equals((getSocialIDByUserID_args)that);
      return false;
    }

    public boolean equals(getSocialIDByUserID_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true;
      boolean that_present_userID = true;
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (this.userID != that.userID)
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSocialIDByUserID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSocialIDByUserID_args typedOther = (getSocialIDByUserID_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSocialIDByUserID_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      sb.append(this.userID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSocialIDByUserID_argsStandardSchemeFactory implements SchemeFactory {
      public getSocialIDByUserID_argsStandardScheme getScheme() {
        return new getSocialIDByUserID_argsStandardScheme();
      }
    }

    private static class getSocialIDByUserID_argsStandardScheme extends StandardScheme<getSocialIDByUserID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSocialIDByUserID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userID = iprot.readI64();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSocialIDByUserID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSocialIDByUserID_argsTupleSchemeFactory implements SchemeFactory {
      public getSocialIDByUserID_argsTupleScheme getScheme() {
        return new getSocialIDByUserID_argsTupleScheme();
      }
    }

    private static class getSocialIDByUserID_argsTupleScheme extends TupleScheme<getSocialIDByUserID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSocialIDByUserID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeI64(struct.userID);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSocialIDByUserID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readI64();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class getSocialIDByUserID_result implements org.apache.thrift.TBase<getSocialIDByUserID_result, getSocialIDByUserID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSocialIDByUserID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSocialIDByUserID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSocialIDByUserID_resultTupleSchemeFactory());
    }

    public TSocialMappingGetSocialID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSocialMappingGetSocialID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSocialIDByUserID_result.class, metaDataMap);
    }

    public getSocialIDByUserID_result() {
    }

    public getSocialIDByUserID_result(
      TSocialMappingGetSocialID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSocialIDByUserID_result(getSocialIDByUserID_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSocialMappingGetSocialID(other.success);
      }
    }

    public getSocialIDByUserID_result deepCopy() {
      return new getSocialIDByUserID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSocialMappingGetSocialID getSuccess() {
      return this.success;
    }

    public getSocialIDByUserID_result setSuccess(TSocialMappingGetSocialID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSocialMappingGetSocialID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSocialIDByUserID_result)
        return this.equals((getSocialIDByUserID_result)that);
      return false;
    }

    public boolean equals(getSocialIDByUserID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSocialIDByUserID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSocialIDByUserID_result typedOther = (getSocialIDByUserID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSocialIDByUserID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSocialIDByUserID_resultStandardSchemeFactory implements SchemeFactory {
      public getSocialIDByUserID_resultStandardScheme getScheme() {
        return new getSocialIDByUserID_resultStandardScheme();
      }
    }

    private static class getSocialIDByUserID_resultStandardScheme extends StandardScheme<getSocialIDByUserID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSocialIDByUserID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSocialMappingGetSocialID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSocialIDByUserID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSocialIDByUserID_resultTupleSchemeFactory implements SchemeFactory {
      public getSocialIDByUserID_resultTupleScheme getScheme() {
        return new getSocialIDByUserID_resultTupleScheme();
      }
    }

    private static class getSocialIDByUserID_resultTupleScheme extends TupleScheme<getSocialIDByUserID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSocialIDByUserID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSocialIDByUserID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TSocialMappingGetSocialID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserIDBySocialID_args implements org.apache.thrift.TBase<getUserIDBySocialID_args, getUserIDBySocialID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIDBySocialID_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SOCIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("socialID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("typeLogin", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIDBySocialID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIDBySocialID_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String socialID; // required
    public int typeLogin; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      SOCIAL_ID((short)2, "socialID"),
      TYPE_LOGIN((short)3, "typeLogin");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // SOCIAL_ID
            return SOCIAL_ID;
          case 3: // TYPE_LOGIN
            return TYPE_LOGIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPELOGIN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOCIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("socialID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("typeLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIDBySocialID_args.class, metaDataMap);
    }

    public getUserIDBySocialID_args() {
    }

    public getUserIDBySocialID_args(
      String gameID,
      String socialID,
      int typeLogin)
    {
      this();
      this.gameID = gameID;
      this.socialID = socialID;
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIDBySocialID_args(getUserIDBySocialID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetSocialID()) {
        this.socialID = other.socialID;
      }
      this.typeLogin = other.typeLogin;
    }

    public getUserIDBySocialID_args deepCopy() {
      return new getUserIDBySocialID_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.socialID = null;
      setTypeLoginIsSet(false);
      this.typeLogin = 0;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getUserIDBySocialID_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getSocialID() {
      return this.socialID;
    }

    public getUserIDBySocialID_args setSocialID(String socialID) {
      this.socialID = socialID;
      return this;
    }

    public void unsetSocialID() {
      this.socialID = null;
    }

    /** Returns true if field socialID is set (has been assigned a value) and false otherwise */
    public boolean isSetSocialID() {
      return this.socialID != null;
    }

    public void setSocialIDIsSet(boolean value) {
      if (!value) {
        this.socialID = null;
      }
    }

    public int getTypeLogin() {
      return this.typeLogin;
    }

    public getUserIDBySocialID_args setTypeLogin(int typeLogin) {
      this.typeLogin = typeLogin;
      setTypeLoginIsSet(true);
      return this;
    }

    public void unsetTypeLogin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    /** Returns true if field typeLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeLogin() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPELOGIN_ISSET_ID);
    }

    public void setTypeLoginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPELOGIN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case SOCIAL_ID:
        if (value == null) {
          unsetSocialID();
        } else {
          setSocialID((String)value);
        }
        break;

      case TYPE_LOGIN:
        if (value == null) {
          unsetTypeLogin();
        } else {
          setTypeLogin((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case SOCIAL_ID:
        return getSocialID();

      case TYPE_LOGIN:
        return Integer.valueOf(getTypeLogin());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case SOCIAL_ID:
        return isSetSocialID();
      case TYPE_LOGIN:
        return isSetTypeLogin();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIDBySocialID_args)
        return this.equals((getUserIDBySocialID_args)that);
      return false;
    }

    public boolean equals(getUserIDBySocialID_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_socialID = true && this.isSetSocialID();
      boolean that_present_socialID = true && that.isSetSocialID();
      if (this_present_socialID || that_present_socialID) {
        if (!(this_present_socialID && that_present_socialID))
          return false;
        if (!this.socialID.equals(that.socialID))
          return false;
      }

      boolean this_present_typeLogin = true;
      boolean that_present_typeLogin = true;
      if (this_present_typeLogin || that_present_typeLogin) {
        if (!(this_present_typeLogin && that_present_typeLogin))
          return false;
        if (this.typeLogin != that.typeLogin)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserIDBySocialID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserIDBySocialID_args typedOther = (getUserIDBySocialID_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSocialID()).compareTo(typedOther.isSetSocialID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSocialID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.socialID, typedOther.socialID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeLogin()).compareTo(typedOther.isSetTypeLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeLogin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeLogin, typedOther.typeLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIDBySocialID_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("socialID:");
      if (this.socialID == null) {
        sb.append("null");
      } else {
        sb.append(this.socialID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeLogin:");
      sb.append(this.typeLogin);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIDBySocialID_argsStandardSchemeFactory implements SchemeFactory {
      public getUserIDBySocialID_argsStandardScheme getScheme() {
        return new getUserIDBySocialID_argsStandardScheme();
      }
    }

    private static class getUserIDBySocialID_argsStandardScheme extends StandardScheme<getUserIDBySocialID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIDBySocialID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOCIAL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.socialID = iprot.readString();
                struct.setSocialIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE_LOGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.typeLogin = iprot.readI32();
                struct.setTypeLoginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIDBySocialID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.socialID != null) {
          oprot.writeFieldBegin(SOCIAL_ID_FIELD_DESC);
          oprot.writeString(struct.socialID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_LOGIN_FIELD_DESC);
        oprot.writeI32(struct.typeLogin);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIDBySocialID_argsTupleSchemeFactory implements SchemeFactory {
      public getUserIDBySocialID_argsTupleScheme getScheme() {
        return new getUserIDBySocialID_argsTupleScheme();
      }
    }

    private static class getUserIDBySocialID_argsTupleScheme extends TupleScheme<getUserIDBySocialID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIDBySocialID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetSocialID()) {
          optionals.set(1);
        }
        if (struct.isSetTypeLogin()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetSocialID()) {
          oprot.writeString(struct.socialID);
        }
        if (struct.isSetTypeLogin()) {
          oprot.writeI32(struct.typeLogin);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIDBySocialID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.socialID = iprot.readString();
          struct.setSocialIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.typeLogin = iprot.readI32();
          struct.setTypeLoginIsSet(true);
        }
      }
    }

  }

  public static class getUserIDBySocialID_result implements org.apache.thrift.TBase<getUserIDBySocialID_result, getUserIDBySocialID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIDBySocialID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIDBySocialID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIDBySocialID_resultTupleSchemeFactory());
    }

    public TSocialMappingGetUserID success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSocialMappingGetUserID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIDBySocialID_result.class, metaDataMap);
    }

    public getUserIDBySocialID_result() {
    }

    public getUserIDBySocialID_result(
      TSocialMappingGetUserID success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIDBySocialID_result(getUserIDBySocialID_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSocialMappingGetUserID(other.success);
      }
    }

    public getUserIDBySocialID_result deepCopy() {
      return new getUserIDBySocialID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TSocialMappingGetUserID getSuccess() {
      return this.success;
    }

    public getUserIDBySocialID_result setSuccess(TSocialMappingGetUserID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSocialMappingGetUserID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIDBySocialID_result)
        return this.equals((getUserIDBySocialID_result)that);
      return false;
    }

    public boolean equals(getUserIDBySocialID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserIDBySocialID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserIDBySocialID_result typedOther = (getUserIDBySocialID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIDBySocialID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIDBySocialID_resultStandardSchemeFactory implements SchemeFactory {
      public getUserIDBySocialID_resultStandardScheme getScheme() {
        return new getUserIDBySocialID_resultStandardScheme();
      }
    }

    private static class getUserIDBySocialID_resultStandardScheme extends StandardScheme<getUserIDBySocialID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIDBySocialID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSocialMappingGetUserID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIDBySocialID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIDBySocialID_resultTupleSchemeFactory implements SchemeFactory {
      public getUserIDBySocialID_resultTupleScheme getScheme() {
        return new getUserIDBySocialID_resultTupleScheme();
      }
    }

    private static class getUserIDBySocialID_resultTupleScheme extends TupleScheme<getUserIDBySocialID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIDBySocialID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIDBySocialID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TSocialMappingGetUserID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.passport.extprofile.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PPExtProfileDBService {

  public interface Iface {

    public TReturnCode setExtProfile(String gameID, String userID, TExtProfile extProfile) throws org.apache.thrift.TException;

    public TExtProfileGetExtProfile getExtProfile(String gameID, String userID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setExtProfile(String gameID, String userID, TExtProfile extProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setExtProfile_call> resultHandler) throws org.apache.thrift.TException;

    public void getExtProfile(String gameID, String userID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getExtProfile_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TReturnCode setExtProfile(String gameID, String userID, TExtProfile extProfile) throws org.apache.thrift.TException
    {
      send_setExtProfile(gameID, userID, extProfile);
      return recv_setExtProfile();
    }

    public void send_setExtProfile(String gameID, String userID, TExtProfile extProfile) throws org.apache.thrift.TException
    {
      setExtProfile_args args = new setExtProfile_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      args.setExtProfile(extProfile);
      sendBase("setExtProfile", args);
    }

    public TReturnCode recv_setExtProfile() throws org.apache.thrift.TException
    {
      setExtProfile_result result = new setExtProfile_result();
      receiveBase(result, "setExtProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setExtProfile failed: unknown result");
    }

    public TExtProfileGetExtProfile getExtProfile(String gameID, String userID) throws org.apache.thrift.TException
    {
      send_getExtProfile(gameID, userID);
      return recv_getExtProfile();
    }

    public void send_getExtProfile(String gameID, String userID) throws org.apache.thrift.TException
    {
      getExtProfile_args args = new getExtProfile_args();
      args.setGameID(gameID);
      args.setUserID(userID);
      sendBase("getExtProfile", args);
    }

    public TExtProfileGetExtProfile recv_getExtProfile() throws org.apache.thrift.TException
    {
      getExtProfile_result result = new getExtProfile_result();
      receiveBase(result, "getExtProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtProfile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setExtProfile(String gameID, String userID, TExtProfile extProfile, org.apache.thrift.async.AsyncMethodCallback<setExtProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setExtProfile_call method_call = new setExtProfile_call(gameID, userID, extProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setExtProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String userID;
      private TExtProfile extProfile;
      public setExtProfile_call(String gameID, String userID, TExtProfile extProfile, org.apache.thrift.async.AsyncMethodCallback<setExtProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
        this.extProfile = extProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setExtProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setExtProfile_args args = new setExtProfile_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.setExtProfile(extProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setExtProfile();
      }
    }

    public void getExtProfile(String gameID, String userID, org.apache.thrift.async.AsyncMethodCallback<getExtProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtProfile_call method_call = new getExtProfile_call(gameID, userID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String gameID;
      private String userID;
      public getExtProfile_call(String gameID, String userID, org.apache.thrift.async.AsyncMethodCallback<getExtProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gameID = gameID;
        this.userID = userID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtProfile_args args = new getExtProfile_args();
        args.setGameID(gameID);
        args.setUserID(userID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExtProfileGetExtProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtProfile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setExtProfile", new setExtProfile());
      processMap.put("getExtProfile", new getExtProfile());
      return processMap;
    }

    public static class setExtProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setExtProfile_args> {
      public setExtProfile() {
        super("setExtProfile");
      }

      public setExtProfile_args getEmptyArgsInstance() {
        return new setExtProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setExtProfile_result getResult(I iface, setExtProfile_args args) throws org.apache.thrift.TException {
        setExtProfile_result result = new setExtProfile_result();
        result.success = iface.setExtProfile(args.gameID, args.userID, args.extProfile);
        return result;
      }
    }

    public static class getExtProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtProfile_args> {
      public getExtProfile() {
        super("getExtProfile");
      }

      public getExtProfile_args getEmptyArgsInstance() {
        return new getExtProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExtProfile_result getResult(I iface, getExtProfile_args args) throws org.apache.thrift.TException {
        getExtProfile_result result = new getExtProfile_result();
        result.success = iface.getExtProfile(args.gameID, args.userID);
        return result;
      }
    }

  }

  public static class setExtProfile_args implements org.apache.thrift.TBase<setExtProfile_args, setExtProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setExtProfile_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXT_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("extProfile", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setExtProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setExtProfile_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String userID; // required
    public TExtProfile extProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID"),
      EXT_PROFILE((short)3, "extProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // EXT_PROFILE
            return EXT_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("extProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExtProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setExtProfile_args.class, metaDataMap);
    }

    public setExtProfile_args() {
    }

    public setExtProfile_args(
      String gameID,
      String userID,
      TExtProfile extProfile)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
      this.extProfile = extProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setExtProfile_args(setExtProfile_args other) {
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
      if (other.isSetExtProfile()) {
        this.extProfile = new TExtProfile(other.extProfile);
      }
    }

    public setExtProfile_args deepCopy() {
      return new setExtProfile_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.userID = null;
      this.extProfile = null;
    }

    public String getGameID() {
      return this.gameID;
    }

    public setExtProfile_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public setExtProfile_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public TExtProfile getExtProfile() {
      return this.extProfile;
    }

    public setExtProfile_args setExtProfile(TExtProfile extProfile) {
      this.extProfile = extProfile;
      return this;
    }

    public void unsetExtProfile() {
      this.extProfile = null;
    }

    /** Returns true if field extProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetExtProfile() {
      return this.extProfile != null;
    }

    public void setExtProfileIsSet(boolean value) {
      if (!value) {
        this.extProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      case EXT_PROFILE:
        if (value == null) {
          unsetExtProfile();
        } else {
          setExtProfile((TExtProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return getUserID();

      case EXT_PROFILE:
        return getExtProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      case EXT_PROFILE:
        return isSetExtProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setExtProfile_args)
        return this.equals((setExtProfile_args)that);
      return false;
    }

    public boolean equals(setExtProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      boolean this_present_extProfile = true && this.isSetExtProfile();
      boolean that_present_extProfile = true && that.isSetExtProfile();
      if (this_present_extProfile || that_present_extProfile) {
        if (!(this_present_extProfile && that_present_extProfile))
          return false;
        if (!this.extProfile.equals(that.extProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setExtProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setExtProfile_args typedOther = (setExtProfile_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtProfile()).compareTo(typedOther.isSetExtProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extProfile, typedOther.extProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setExtProfile_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extProfile:");
      if (this.extProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.extProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (extProfile != null) {
        extProfile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setExtProfile_argsStandardSchemeFactory implements SchemeFactory {
      public setExtProfile_argsStandardScheme getScheme() {
        return new setExtProfile_argsStandardScheme();
      }
    }

    private static class setExtProfile_argsStandardScheme extends StandardScheme<setExtProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setExtProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXT_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.extProfile = new TExtProfile();
                struct.extProfile.read(iprot);
                struct.setExtProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setExtProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        if (struct.extProfile != null) {
          oprot.writeFieldBegin(EXT_PROFILE_FIELD_DESC);
          struct.extProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setExtProfile_argsTupleSchemeFactory implements SchemeFactory {
      public setExtProfile_argsTupleScheme getScheme() {
        return new setExtProfile_argsTupleScheme();
      }
    }

    private static class setExtProfile_argsTupleScheme extends TupleScheme<setExtProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setExtProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        if (struct.isSetExtProfile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeString(struct.userID);
        }
        if (struct.isSetExtProfile()) {
          struct.extProfile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setExtProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readString();
          struct.setUserIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.extProfile = new TExtProfile();
          struct.extProfile.read(iprot);
          struct.setExtProfileIsSet(true);
        }
      }
    }

  }

  public static class setExtProfile_result implements org.apache.thrift.TBase<setExtProfile_result, setExtProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setExtProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setExtProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setExtProfile_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see TReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setExtProfile_result.class, metaDataMap);
    }

    public setExtProfile_result() {
    }

    public setExtProfile_result(
      TReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setExtProfile_result(setExtProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setExtProfile_result deepCopy() {
      return new setExtProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see TReturnCode
     */
    public TReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see TReturnCode
     */
    public setExtProfile_result setSuccess(TReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setExtProfile_result)
        return this.equals((setExtProfile_result)that);
      return false;
    }

    public boolean equals(setExtProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setExtProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setExtProfile_result typedOther = (setExtProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setExtProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setExtProfile_resultStandardSchemeFactory implements SchemeFactory {
      public setExtProfile_resultStandardScheme getScheme() {
        return new setExtProfile_resultStandardScheme();
      }
    }

    private static class setExtProfile_resultStandardScheme extends StandardScheme<setExtProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setExtProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = TReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setExtProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setExtProfile_resultTupleSchemeFactory implements SchemeFactory {
      public setExtProfile_resultTupleScheme getScheme() {
        return new setExtProfile_resultTupleScheme();
      }
    }

    private static class setExtProfile_resultTupleScheme extends TupleScheme<setExtProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setExtProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setExtProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = TReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getExtProfile_args implements org.apache.thrift.TBase<getExtProfile_args, getExtProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtProfile_args");

    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtProfile_argsTupleSchemeFactory());
    }

    public String gameID; // required
    public String userID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GAME_ID((short)1, "gameID"),
      USER_ID((short)2, "userID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GAME_ID
            return GAME_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtProfile_args.class, metaDataMap);
    }

    public getExtProfile_args() {
    }

    public getExtProfile_args(
      String gameID,
      String userID)
    {
      this();
      this.gameID = gameID;
      this.userID = userID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtProfile_args(getExtProfile_args other) {
      if (other.isSetGameID()) {
        this.gameID = other.gameID;
      }
      if (other.isSetUserID()) {
        this.userID = other.userID;
      }
    }

    public getExtProfile_args deepCopy() {
      return new getExtProfile_args(this);
    }

    @Override
    public void clear() {
      this.gameID = null;
      this.userID = null;
    }

    public String getGameID() {
      return this.gameID;
    }

    public getExtProfile_args setGameID(String gameID) {
      this.gameID = gameID;
      return this;
    }

    public void unsetGameID() {
      this.gameID = null;
    }

    /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
    public boolean isSetGameID() {
      return this.gameID != null;
    }

    public void setGameIDIsSet(boolean value) {
      if (!value) {
        this.gameID = null;
      }
    }

    public String getUserID() {
      return this.userID;
    }

    public getExtProfile_args setUserID(String userID) {
      this.userID = userID;
      return this;
    }

    public void unsetUserID() {
      this.userID = null;
    }

    /** Returns true if field userID is set (has been assigned a value) and false otherwise */
    public boolean isSetUserID() {
      return this.userID != null;
    }

    public void setUserIDIsSet(boolean value) {
      if (!value) {
        this.userID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GAME_ID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserID();
        } else {
          setUserID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GAME_ID:
        return getGameID();

      case USER_ID:
        return getUserID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GAME_ID:
        return isSetGameID();
      case USER_ID:
        return isSetUserID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtProfile_args)
        return this.equals((getExtProfile_args)that);
      return false;
    }

    public boolean equals(getExtProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true && this.isSetGameID();
      boolean that_present_gameID = true && that.isSetGameID();
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (!this.gameID.equals(that.gameID))
          return false;
      }

      boolean this_present_userID = true && this.isSetUserID();
      boolean that_present_userID = true && that.isSetUserID();
      if (this_present_userID || that_present_userID) {
        if (!(this_present_userID && that_present_userID))
          return false;
        if (!this.userID.equals(that.userID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtProfile_args typedOther = (getExtProfile_args)other;

      lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtProfile_args(");
      boolean first = true;

      sb.append("gameID:");
      if (this.gameID == null) {
        sb.append("null");
      } else {
        sb.append(this.gameID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userID:");
      if (this.userID == null) {
        sb.append("null");
      } else {
        sb.append(this.userID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getExtProfile_argsStandardScheme getScheme() {
        return new getExtProfile_argsStandardScheme();
      }
    }

    private static class getExtProfile_argsStandardScheme extends StandardScheme<getExtProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gameID = iprot.readString();
                struct.setGameIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userID = iprot.readString();
                struct.setUserIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gameID != null) {
          oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
          oprot.writeString(struct.gameID);
          oprot.writeFieldEnd();
        }
        if (struct.userID != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getExtProfile_argsTupleScheme getScheme() {
        return new getExtProfile_argsTupleScheme();
      }
    }

    private static class getExtProfile_argsTupleScheme extends TupleScheme<getExtProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGameID()) {
          optionals.set(0);
        }
        if (struct.isSetUserID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGameID()) {
          oprot.writeString(struct.gameID);
        }
        if (struct.isSetUserID()) {
          oprot.writeString(struct.userID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gameID = iprot.readString();
          struct.setGameIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userID = iprot.readString();
          struct.setUserIDIsSet(true);
        }
      }
    }

  }

  public static class getExtProfile_result implements org.apache.thrift.TBase<getExtProfile_result, getExtProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExtProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExtProfile_resultTupleSchemeFactory());
    }

    public TExtProfileGetExtProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExtProfileGetExtProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtProfile_result.class, metaDataMap);
    }

    public getExtProfile_result() {
    }

    public getExtProfile_result(
      TExtProfileGetExtProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtProfile_result(getExtProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExtProfileGetExtProfile(other.success);
      }
    }

    public getExtProfile_result deepCopy() {
      return new getExtProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TExtProfileGetExtProfile getSuccess() {
      return this.success;
    }

    public getExtProfile_result setSuccess(TExtProfileGetExtProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExtProfileGetExtProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtProfile_result)
        return this.equals((getExtProfile_result)that);
      return false;
    }

    public boolean equals(getExtProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getExtProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getExtProfile_result typedOther = (getExtProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExtProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getExtProfile_resultStandardScheme getScheme() {
        return new getExtProfile_resultStandardScheme();
      }
    }

    private static class getExtProfile_resultStandardScheme extends StandardScheme<getExtProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExtProfileGetExtProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getExtProfile_resultTupleScheme getScheme() {
        return new getExtProfile_resultTupleScheme();
      }
    }

    private static class getExtProfile_resultTupleScheme extends TupleScheme<getExtProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TExtProfileGetExtProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

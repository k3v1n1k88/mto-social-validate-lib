/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mto.passport.extprofile.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TExtProfile implements org.apache.thrift.TBase<TExtProfile, TExtProfile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExtProfile");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ppID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PP_DOI_FIELD_DESC = new org.apache.thrift.protocol.TField("ppDOI", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PP_POI_FIELD_DESC = new org.apache.thrift.protocol.TField("ppPOI", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OPT1_FIELD_DESC = new org.apache.thrift.protocol.TField("opt1", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OPT2_FIELD_DESC = new org.apache.thrift.protocol.TField("opt2", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OPT3_FIELD_DESC = new org.apache.thrift.protocol.TField("opt3", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OPT4_FIELD_DESC = new org.apache.thrift.protocol.TField("opt4", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExtProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExtProfileTupleSchemeFactory());
  }

  public String userID; // required
  public String gameID; // required
  public String name; // required
  public long dob; // required
  public String ppID; // required
  public long ppDOI; // required
  public String ppPOI; // required
  public String addr; // required
  public String email; // required
  public String phone; // required
  public String opt1; // required
  public String opt2; // required
  public String opt3; // required
  public String opt4; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userID"),
    GAME_ID((short)2, "gameID"),
    NAME((short)3, "name"),
    DOB((short)4, "dob"),
    PP_ID((short)5, "ppID"),
    PP_DOI((short)6, "ppDOI"),
    PP_POI((short)7, "ppPOI"),
    ADDR((short)8, "addr"),
    EMAIL((short)9, "email"),
    PHONE((short)10, "phone"),
    OPT1((short)11, "opt1"),
    OPT2((short)12, "opt2"),
    OPT3((short)13, "opt3"),
    OPT4((short)14, "opt4");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // GAME_ID
          return GAME_ID;
        case 3: // NAME
          return NAME;
        case 4: // DOB
          return DOB;
        case 5: // PP_ID
          return PP_ID;
        case 6: // PP_DOI
          return PP_DOI;
        case 7: // PP_POI
          return PP_POI;
        case 8: // ADDR
          return ADDR;
        case 9: // EMAIL
          return EMAIL;
        case 10: // PHONE
          return PHONE;
        case 11: // OPT1
          return OPT1;
        case 12: // OPT2
          return OPT2;
        case 13: // OPT3
          return OPT3;
        case 14: // OPT4
          return OPT4;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOB_ISSET_ID = 0;
  private static final int __PPDOI_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PP_ID, new org.apache.thrift.meta_data.FieldMetaData("ppID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PP_DOI, new org.apache.thrift.meta_data.FieldMetaData("ppDOI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PP_POI, new org.apache.thrift.meta_data.FieldMetaData("ppPOI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPT1, new org.apache.thrift.meta_data.FieldMetaData("opt1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPT2, new org.apache.thrift.meta_data.FieldMetaData("opt2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPT3, new org.apache.thrift.meta_data.FieldMetaData("opt3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPT4, new org.apache.thrift.meta_data.FieldMetaData("opt4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExtProfile.class, metaDataMap);
  }

  public TExtProfile() {
  }

  public TExtProfile(
    String userID,
    String gameID,
    String name,
    long dob,
    String ppID,
    long ppDOI,
    String ppPOI,
    String addr,
    String email,
    String phone,
    String opt1,
    String opt2,
    String opt3,
    String opt4)
  {
    this();
    this.userID = userID;
    this.gameID = gameID;
    this.name = name;
    this.dob = dob;
    setDobIsSet(true);
    this.ppID = ppID;
    this.ppDOI = ppDOI;
    setPpDOIIsSet(true);
    this.ppPOI = ppPOI;
    this.addr = addr;
    this.email = email;
    this.phone = phone;
    this.opt1 = opt1;
    this.opt2 = opt2;
    this.opt3 = opt3;
    this.opt4 = opt4;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExtProfile(TExtProfile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserID()) {
      this.userID = other.userID;
    }
    if (other.isSetGameID()) {
      this.gameID = other.gameID;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.dob = other.dob;
    if (other.isSetPpID()) {
      this.ppID = other.ppID;
    }
    this.ppDOI = other.ppDOI;
    if (other.isSetPpPOI()) {
      this.ppPOI = other.ppPOI;
    }
    if (other.isSetAddr()) {
      this.addr = other.addr;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetOpt1()) {
      this.opt1 = other.opt1;
    }
    if (other.isSetOpt2()) {
      this.opt2 = other.opt2;
    }
    if (other.isSetOpt3()) {
      this.opt3 = other.opt3;
    }
    if (other.isSetOpt4()) {
      this.opt4 = other.opt4;
    }
  }

  public TExtProfile deepCopy() {
    return new TExtProfile(this);
  }

  @Override
  public void clear() {
    this.userID = null;
    this.gameID = null;
    this.name = null;
    setDobIsSet(false);
    this.dob = 0;
    this.ppID = null;
    setPpDOIIsSet(false);
    this.ppDOI = 0;
    this.ppPOI = null;
    this.addr = null;
    this.email = null;
    this.phone = null;
    this.opt1 = null;
    this.opt2 = null;
    this.opt3 = null;
    this.opt4 = null;
  }

  public String getUserID() {
    return this.userID;
  }

  public TExtProfile setUserID(String userID) {
    this.userID = userID;
    return this;
  }

  public void unsetUserID() {
    this.userID = null;
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return this.userID != null;
  }

  public void setUserIDIsSet(boolean value) {
    if (!value) {
      this.userID = null;
    }
  }

  public String getGameID() {
    return this.gameID;
  }

  public TExtProfile setGameID(String gameID) {
    this.gameID = gameID;
    return this;
  }

  public void unsetGameID() {
    this.gameID = null;
  }

  /** Returns true if field gameID is set (has been assigned a value) and false otherwise */
  public boolean isSetGameID() {
    return this.gameID != null;
  }

  public void setGameIDIsSet(boolean value) {
    if (!value) {
      this.gameID = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TExtProfile setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getDob() {
    return this.dob;
  }

  public TExtProfile setDob(long dob) {
    this.dob = dob;
    setDobIsSet(true);
    return this;
  }

  public void unsetDob() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOB_ISSET_ID);
  }

  /** Returns true if field dob is set (has been assigned a value) and false otherwise */
  public boolean isSetDob() {
    return EncodingUtils.testBit(__isset_bitfield, __DOB_ISSET_ID);
  }

  public void setDobIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOB_ISSET_ID, value);
  }

  public String getPpID() {
    return this.ppID;
  }

  public TExtProfile setPpID(String ppID) {
    this.ppID = ppID;
    return this;
  }

  public void unsetPpID() {
    this.ppID = null;
  }

  /** Returns true if field ppID is set (has been assigned a value) and false otherwise */
  public boolean isSetPpID() {
    return this.ppID != null;
  }

  public void setPpIDIsSet(boolean value) {
    if (!value) {
      this.ppID = null;
    }
  }

  public long getPpDOI() {
    return this.ppDOI;
  }

  public TExtProfile setPpDOI(long ppDOI) {
    this.ppDOI = ppDOI;
    setPpDOIIsSet(true);
    return this;
  }

  public void unsetPpDOI() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PPDOI_ISSET_ID);
  }

  /** Returns true if field ppDOI is set (has been assigned a value) and false otherwise */
  public boolean isSetPpDOI() {
    return EncodingUtils.testBit(__isset_bitfield, __PPDOI_ISSET_ID);
  }

  public void setPpDOIIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PPDOI_ISSET_ID, value);
  }

  public String getPpPOI() {
    return this.ppPOI;
  }

  public TExtProfile setPpPOI(String ppPOI) {
    this.ppPOI = ppPOI;
    return this;
  }

  public void unsetPpPOI() {
    this.ppPOI = null;
  }

  /** Returns true if field ppPOI is set (has been assigned a value) and false otherwise */
  public boolean isSetPpPOI() {
    return this.ppPOI != null;
  }

  public void setPpPOIIsSet(boolean value) {
    if (!value) {
      this.ppPOI = null;
    }
  }

  public String getAddr() {
    return this.addr;
  }

  public TExtProfile setAddr(String addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public TExtProfile setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public TExtProfile setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getOpt1() {
    return this.opt1;
  }

  public TExtProfile setOpt1(String opt1) {
    this.opt1 = opt1;
    return this;
  }

  public void unsetOpt1() {
    this.opt1 = null;
  }

  /** Returns true if field opt1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt1() {
    return this.opt1 != null;
  }

  public void setOpt1IsSet(boolean value) {
    if (!value) {
      this.opt1 = null;
    }
  }

  public String getOpt2() {
    return this.opt2;
  }

  public TExtProfile setOpt2(String opt2) {
    this.opt2 = opt2;
    return this;
  }

  public void unsetOpt2() {
    this.opt2 = null;
  }

  /** Returns true if field opt2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt2() {
    return this.opt2 != null;
  }

  public void setOpt2IsSet(boolean value) {
    if (!value) {
      this.opt2 = null;
    }
  }

  public String getOpt3() {
    return this.opt3;
  }

  public TExtProfile setOpt3(String opt3) {
    this.opt3 = opt3;
    return this;
  }

  public void unsetOpt3() {
    this.opt3 = null;
  }

  /** Returns true if field opt3 is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt3() {
    return this.opt3 != null;
  }

  public void setOpt3IsSet(boolean value) {
    if (!value) {
      this.opt3 = null;
    }
  }

  public String getOpt4() {
    return this.opt4;
  }

  public TExtProfile setOpt4(String opt4) {
    this.opt4 = opt4;
    return this;
  }

  public void unsetOpt4() {
    this.opt4 = null;
  }

  /** Returns true if field opt4 is set (has been assigned a value) and false otherwise */
  public boolean isSetOpt4() {
    return this.opt4 != null;
  }

  public void setOpt4IsSet(boolean value) {
    if (!value) {
      this.opt4 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((String)value);
      }
      break;

    case GAME_ID:
      if (value == null) {
        unsetGameID();
      } else {
        setGameID((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DOB:
      if (value == null) {
        unsetDob();
      } else {
        setDob((Long)value);
      }
      break;

    case PP_ID:
      if (value == null) {
        unsetPpID();
      } else {
        setPpID((String)value);
      }
      break;

    case PP_DOI:
      if (value == null) {
        unsetPpDOI();
      } else {
        setPpDOI((Long)value);
      }
      break;

    case PP_POI:
      if (value == null) {
        unsetPpPOI();
      } else {
        setPpPOI((String)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case OPT1:
      if (value == null) {
        unsetOpt1();
      } else {
        setOpt1((String)value);
      }
      break;

    case OPT2:
      if (value == null) {
        unsetOpt2();
      } else {
        setOpt2((String)value);
      }
      break;

    case OPT3:
      if (value == null) {
        unsetOpt3();
      } else {
        setOpt3((String)value);
      }
      break;

    case OPT4:
      if (value == null) {
        unsetOpt4();
      } else {
        setOpt4((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserID();

    case GAME_ID:
      return getGameID();

    case NAME:
      return getName();

    case DOB:
      return Long.valueOf(getDob());

    case PP_ID:
      return getPpID();

    case PP_DOI:
      return Long.valueOf(getPpDOI());

    case PP_POI:
      return getPpPOI();

    case ADDR:
      return getAddr();

    case EMAIL:
      return getEmail();

    case PHONE:
      return getPhone();

    case OPT1:
      return getOpt1();

    case OPT2:
      return getOpt2();

    case OPT3:
      return getOpt3();

    case OPT4:
      return getOpt4();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case GAME_ID:
      return isSetGameID();
    case NAME:
      return isSetName();
    case DOB:
      return isSetDob();
    case PP_ID:
      return isSetPpID();
    case PP_DOI:
      return isSetPpDOI();
    case PP_POI:
      return isSetPpPOI();
    case ADDR:
      return isSetAddr();
    case EMAIL:
      return isSetEmail();
    case PHONE:
      return isSetPhone();
    case OPT1:
      return isSetOpt1();
    case OPT2:
      return isSetOpt2();
    case OPT3:
      return isSetOpt3();
    case OPT4:
      return isSetOpt4();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExtProfile)
      return this.equals((TExtProfile)that);
    return false;
  }

  public boolean equals(TExtProfile that) {
    if (that == null)
      return false;

    boolean this_present_userID = true && this.isSetUserID();
    boolean that_present_userID = true && that.isSetUserID();
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (!this.userID.equals(that.userID))
        return false;
    }

    boolean this_present_gameID = true && this.isSetGameID();
    boolean that_present_gameID = true && that.isSetGameID();
    if (this_present_gameID || that_present_gameID) {
      if (!(this_present_gameID && that_present_gameID))
        return false;
      if (!this.gameID.equals(that.gameID))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dob = true;
    boolean that_present_dob = true;
    if (this_present_dob || that_present_dob) {
      if (!(this_present_dob && that_present_dob))
        return false;
      if (this.dob != that.dob)
        return false;
    }

    boolean this_present_ppID = true && this.isSetPpID();
    boolean that_present_ppID = true && that.isSetPpID();
    if (this_present_ppID || that_present_ppID) {
      if (!(this_present_ppID && that_present_ppID))
        return false;
      if (!this.ppID.equals(that.ppID))
        return false;
    }

    boolean this_present_ppDOI = true;
    boolean that_present_ppDOI = true;
    if (this_present_ppDOI || that_present_ppDOI) {
      if (!(this_present_ppDOI && that_present_ppDOI))
        return false;
      if (this.ppDOI != that.ppDOI)
        return false;
    }

    boolean this_present_ppPOI = true && this.isSetPpPOI();
    boolean that_present_ppPOI = true && that.isSetPpPOI();
    if (this_present_ppPOI || that_present_ppPOI) {
      if (!(this_present_ppPOI && that_present_ppPOI))
        return false;
      if (!this.ppPOI.equals(that.ppPOI))
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_opt1 = true && this.isSetOpt1();
    boolean that_present_opt1 = true && that.isSetOpt1();
    if (this_present_opt1 || that_present_opt1) {
      if (!(this_present_opt1 && that_present_opt1))
        return false;
      if (!this.opt1.equals(that.opt1))
        return false;
    }

    boolean this_present_opt2 = true && this.isSetOpt2();
    boolean that_present_opt2 = true && that.isSetOpt2();
    if (this_present_opt2 || that_present_opt2) {
      if (!(this_present_opt2 && that_present_opt2))
        return false;
      if (!this.opt2.equals(that.opt2))
        return false;
    }

    boolean this_present_opt3 = true && this.isSetOpt3();
    boolean that_present_opt3 = true && that.isSetOpt3();
    if (this_present_opt3 || that_present_opt3) {
      if (!(this_present_opt3 && that_present_opt3))
        return false;
      if (!this.opt3.equals(that.opt3))
        return false;
    }

    boolean this_present_opt4 = true && this.isSetOpt4();
    boolean that_present_opt4 = true && that.isSetOpt4();
    if (this_present_opt4 || that_present_opt4) {
      if (!(this_present_opt4 && that_present_opt4))
        return false;
      if (!this.opt4.equals(that.opt4))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TExtProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TExtProfile typedOther = (TExtProfile)other;

    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(typedOther.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, typedOther.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameID()).compareTo(typedOther.isSetGameID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameID, typedOther.gameID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDob()).compareTo(typedOther.isSetDob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, typedOther.dob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPpID()).compareTo(typedOther.isSetPpID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPpID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ppID, typedOther.ppID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPpDOI()).compareTo(typedOther.isSetPpDOI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPpDOI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ppDOI, typedOther.ppDOI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPpPOI()).compareTo(typedOther.isSetPpPOI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPpPOI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ppPOI, typedOther.ppPOI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddr()).compareTo(typedOther.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, typedOther.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt1()).compareTo(typedOther.isSetOpt1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt1, typedOther.opt1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt2()).compareTo(typedOther.isSetOpt2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt2, typedOther.opt2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt3()).compareTo(typedOther.isSetOpt3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt3, typedOther.opt3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpt4()).compareTo(typedOther.isSetOpt4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpt4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt4, typedOther.opt4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExtProfile(");
    boolean first = true;

    sb.append("userID:");
    if (this.userID == null) {
      sb.append("null");
    } else {
      sb.append(this.userID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameID:");
    if (this.gameID == null) {
      sb.append("null");
    } else {
      sb.append(this.gameID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dob:");
    sb.append(this.dob);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ppID:");
    if (this.ppID == null) {
      sb.append("null");
    } else {
      sb.append(this.ppID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ppDOI:");
    sb.append(this.ppDOI);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ppPOI:");
    if (this.ppPOI == null) {
      sb.append("null");
    } else {
      sb.append(this.ppPOI);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addr:");
    if (this.addr == null) {
      sb.append("null");
    } else {
      sb.append(this.addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opt1:");
    if (this.opt1 == null) {
      sb.append("null");
    } else {
      sb.append(this.opt1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opt2:");
    if (this.opt2 == null) {
      sb.append("null");
    } else {
      sb.append(this.opt2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opt3:");
    if (this.opt3 == null) {
      sb.append("null");
    } else {
      sb.append(this.opt3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opt4:");
    if (this.opt4 == null) {
      sb.append("null");
    } else {
      sb.append(this.opt4);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not present! Struct: " + toString());
    }
    if (gameID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'gameID' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExtProfileStandardSchemeFactory implements SchemeFactory {
    public TExtProfileStandardScheme getScheme() {
      return new TExtProfileStandardScheme();
    }
  }

  private static class TExtProfileStandardScheme extends StandardScheme<TExtProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExtProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userID = iprot.readString();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameID = iprot.readString();
              struct.setGameIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dob = iprot.readI64();
              struct.setDobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ppID = iprot.readString();
              struct.setPpIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PP_DOI
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ppDOI = iprot.readI64();
              struct.setPpDOIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PP_POI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ppPOI = iprot.readString();
              struct.setPpPOIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addr = iprot.readString();
              struct.setAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt1 = iprot.readString();
              struct.setOpt1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPT2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt2 = iprot.readString();
              struct.setOpt2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPT3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt3 = iprot.readString();
              struct.setOpt3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPT4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opt4 = iprot.readString();
              struct.setOpt4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExtProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userID != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userID);
        oprot.writeFieldEnd();
      }
      if (struct.gameID != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameID);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOB_FIELD_DESC);
      oprot.writeI64(struct.dob);
      oprot.writeFieldEnd();
      if (struct.ppID != null) {
        oprot.writeFieldBegin(PP_ID_FIELD_DESC);
        oprot.writeString(struct.ppID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PP_DOI_FIELD_DESC);
      oprot.writeI64(struct.ppDOI);
      oprot.writeFieldEnd();
      if (struct.ppPOI != null) {
        oprot.writeFieldBegin(PP_POI_FIELD_DESC);
        oprot.writeString(struct.ppPOI);
        oprot.writeFieldEnd();
      }
      if (struct.addr != null) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        oprot.writeString(struct.addr);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.opt1 != null) {
        oprot.writeFieldBegin(OPT1_FIELD_DESC);
        oprot.writeString(struct.opt1);
        oprot.writeFieldEnd();
      }
      if (struct.opt2 != null) {
        oprot.writeFieldBegin(OPT2_FIELD_DESC);
        oprot.writeString(struct.opt2);
        oprot.writeFieldEnd();
      }
      if (struct.opt3 != null) {
        oprot.writeFieldBegin(OPT3_FIELD_DESC);
        oprot.writeString(struct.opt3);
        oprot.writeFieldEnd();
      }
      if (struct.opt4 != null) {
        oprot.writeFieldBegin(OPT4_FIELD_DESC);
        oprot.writeString(struct.opt4);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExtProfileTupleSchemeFactory implements SchemeFactory {
    public TExtProfileTupleScheme getScheme() {
      return new TExtProfileTupleScheme();
    }
  }

  private static class TExtProfileTupleScheme extends TupleScheme<TExtProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExtProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.userID);
      oprot.writeString(struct.gameID);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetDob()) {
        optionals.set(1);
      }
      if (struct.isSetPpID()) {
        optionals.set(2);
      }
      if (struct.isSetPpDOI()) {
        optionals.set(3);
      }
      if (struct.isSetPpPOI()) {
        optionals.set(4);
      }
      if (struct.isSetAddr()) {
        optionals.set(5);
      }
      if (struct.isSetEmail()) {
        optionals.set(6);
      }
      if (struct.isSetPhone()) {
        optionals.set(7);
      }
      if (struct.isSetOpt1()) {
        optionals.set(8);
      }
      if (struct.isSetOpt2()) {
        optionals.set(9);
      }
      if (struct.isSetOpt3()) {
        optionals.set(10);
      }
      if (struct.isSetOpt4()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDob()) {
        oprot.writeI64(struct.dob);
      }
      if (struct.isSetPpID()) {
        oprot.writeString(struct.ppID);
      }
      if (struct.isSetPpDOI()) {
        oprot.writeI64(struct.ppDOI);
      }
      if (struct.isSetPpPOI()) {
        oprot.writeString(struct.ppPOI);
      }
      if (struct.isSetAddr()) {
        oprot.writeString(struct.addr);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetOpt1()) {
        oprot.writeString(struct.opt1);
      }
      if (struct.isSetOpt2()) {
        oprot.writeString(struct.opt2);
      }
      if (struct.isSetOpt3()) {
        oprot.writeString(struct.opt3);
      }
      if (struct.isSetOpt4()) {
        oprot.writeString(struct.opt4);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExtProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userID = iprot.readString();
      struct.setUserIDIsSet(true);
      struct.gameID = iprot.readString();
      struct.setGameIDIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dob = iprot.readI64();
        struct.setDobIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ppID = iprot.readString();
        struct.setPpIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ppDOI = iprot.readI64();
        struct.setPpDOIIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ppPOI = iprot.readString();
        struct.setPpPOIIsSet(true);
      }
      if (incoming.get(5)) {
        struct.addr = iprot.readString();
        struct.setAddrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.opt1 = iprot.readString();
        struct.setOpt1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.opt2 = iprot.readString();
        struct.setOpt2IsSet(true);
      }
      if (incoming.get(10)) {
        struct.opt3 = iprot.readString();
        struct.setOpt3IsSet(true);
      }
      if (incoming.get(11)) {
        struct.opt4 = iprot.readString();
        struct.setOpt4IsSet(true);
      }
    }
  }

}

